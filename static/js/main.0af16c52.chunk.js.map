{"version":3,"sources":["components/Game.tsx","App.tsx","index.tsx"],"names":["gridTemplate","size","random","Array","fill","map","cellState","Math","floor","Game","useState","undefined","grid","setGrid","gameState","setGameState","menu","setMenu","menuInfo","setMenuInfo","restart","clear","reset","setReset","gameStateRef","useRef","current","initiateSim","useCallback","neighborCheck","produce","newGrid","i","c","forEach","x","y","positionX","positionY","setTimeout","useEffect","className","rows","rIndex","col","cIndex","key","onClick","copy","updateCell","style","border","backgroundColor","width","height","href","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0af16c52.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport produce from \"immer\";\nimport \"./styles/Game.css\"\n\nconst gridTemplate = (\n    size: number = 50,\n    random: boolean = false\n) => Array(size).fill(0).map(() => {\n    const cellState = Array(size).fill(0);\n\n    if (random) {\n        return cellState.map(() => Math.floor(Math.random() * 2))\n    }\n\n    return cellState\n});\nconst rowNumber: number = 50;\nconst colNumber: number = 50;\n\nconst Game: React.FC = () => {\n    const [grid, setGrid] = useState(() => gridTemplate(undefined, true));\n    const [gameState, setGameState] = useState(true);\n    const [menu, setMenu] = useState(false)\n    const [menuInfo, setMenuInfo] = useState(false)\n    const [reset, setReset] = useState({ restart: false, clear: false });\n    const gameStateRef = useRef(gameState);\n    gameStateRef.current = gameState;\n\n    const updateCell = (\n        grid: any,\n        rIndex: any,\n        cIndex: any\n    ) => {\n        // * NEW GRID COPY\n        const newGrid: any = produce(grid, (copy: any) => {\n            copy[rIndex][cIndex] = grid[rIndex][cIndex] ? 0 : 1;\n        });\n\n        // * UPDATE GRID STATE\n        setGrid(newGrid);\n    }\n\n    const initiateSim = useCallback(() => {\n\n        if (!gameStateRef.current) return null;\n\n        const neighborCheck = [\n            [0, 1],\n            [0, -1],\n            [1, 0],\n            [-1, 0],\n            [1, -1],\n            [-1, 1],\n            [1, 1],\n            [-1, -1]\n        ];\n\n        setGrid(grid => {\n            return produce(grid, newGrid => {\n                // * CHECK AND UPDATE POSITIONS\n                for (let i = 0; i < rowNumber; i++) {\n                    for (let c = 0; c < colNumber; c++) {\n                        let cellState = 0;\n\n                        neighborCheck.forEach(([x, y]) => {\n                            const positionX = i + x;\n                            const positionY = c + y;\n\n                            if (\n                                positionX >= 0 &&\n                                positionX < rowNumber &&\n                                positionY >= 0 &&\n                                positionY < colNumber\n                            ) cellState += grid[positionX][positionY];\n                        })\n\n                        if (cellState < 2 || cellState > 3) {\n                            newGrid[i][c] = 0;\n                        } else if (grid[i][c] === 0 && cellState === 3)\n                            newGrid[i][c] = 1;\n                    }\n                }\n            })\n        })\n\n        setTimeout(() => initiateSim(), 10);\n    }, [])\n\n    useEffect(() => {\n        const { clear, restart } = reset;\n\n        if (restart || clear) {\n            const newGrid = gridTemplate(undefined, clear ? false : true);\n            setReset({ ...reset, restart: false, clear: false })\n\n            if (clear === true) setGameState(false)\n\n            return setGrid(newGrid)\n        }\n\n        if (gameState === true) initiateSim();\n\n    }, [gameState, initiateSim, reset])\n\n    return (\n        <div className=\"board\">\n            <div className=\"grid__wrapper\">\n                <div className=\"grid__container\">\n                    {\n                        grid.map((rows, rIndex) => rows.map(\n                            (col, cIndex) => <div\n                                key={rIndex + cIndex}\n                                onClick={() => !gameState ? updateCell(grid, rIndex, cIndex) : undefined}\n                                style={{\n                                    border: \"solid 0.5px #45A29E\",\n                                    backgroundColor: grid[rIndex][cIndex] ? \"#66FCF1\" : \"#1F2833\",\n                                    width: 25,\n                                    height: 25,\n                                }}>\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n\n            <div\n                onClick={() => setMenu(!menu)}\n                className=\"menu-btn\">\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n\n            <div className={\n                `menu-info ${!menu ? '' : menuInfo ? 'menu-active' : ''}`\n            }>\n                <div>\n                    <header>\n                        <h2>About Conway's Game of Life</h2>\n                    </header>\n\n                    <p>\n                        The Game of Life, also known simply as Life,\n                        is a cellular automaton devised by the British mathematician\n                        John Horton Conway in 1970. It is a zero-player game,\n                        meaning that its evolution is determined by its initial state,\n                        requiring no further input. One interacts with the Game of Life\n                        by creating an initial configuration and observing how it evolves.\n                        It is Turing complete and can simulate a universal constructor or\n                        any other Turing machine.\n                    </p>\n                </div>\n                <button className=\"menu-info_btn\">\n                    <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">\n                        Learn More\n                    </a>\n                </button>\n            </div>\n\n            <div className={`menu ${menu ? 'menu-active' : ''}`}>\n                <button\n                    onClick={() => setMenu(!menu)}>\n                    Close\n                </button>\n\n                <button\n                    onClick={() => { setGameState(!gameState) }}>\n                    {!gameState ? \"Start\" : \"Stop\"}\n                </button>\n\n                <button\n                    onClick={() => { setReset({ ...reset, restart: true }) }}>\n                    Restart\n                </button>\n\n                <button\n                    onClick={() => { setReset({ ...reset, clear: true }) }}>\n                    Clear\n                </button>\n\n                <button\n                    onClick={() => setMenuInfo(!menuInfo)}>\n                    About \"Conway's Game Of Life\"\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/Game';\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game Of Life</h1>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}